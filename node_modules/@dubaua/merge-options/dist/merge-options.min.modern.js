function o(o,t){return Object.prototype.hasOwnProperty.call(o,t)}function t(o){return null!==o&&"object"==typeof o&&!1===Array.isArray(o)}function e({optionConfig:t,userOptions:e={},preffix:i="",suffix:n="",strict:r=!0}){const f=o=>[i,o,n].join(" "),a={};for(const i in t)if(o(t,i)){const n=t[i],{required:p,default:c,description:d,validator:u}=n,s=e[i],l=!!o(n,"required")&&("function"==typeof p?p(e):p),g=o(e,i),$=u(s,e);if(l){if(!g)throw new TypeError(f(i+" is required."));if(!$)throw new TypeError(f(`Expected ${i} to be ${d}, got ${typeof s} ${s}.`));a[i]=s}else if(a[i]=c,g)if($)a[i]=s;else{if(r)throw new TypeError(f(`Expected ${i} to be ${d}, got ${typeof s} ${s}.`));console.warn(f(`Expected ${i} to be ${d}, got ${typeof s} ${s}. Fallback to default value ${c}.`))}}return a}const i="[mergeOptions]:",n="\nCheck out documentation https://github.com/dubaua/merge-options#parameters-and-return";function r(o){throw new TypeError([i,o,n].join(" "))}const f={optionConfig:{required:!0,validator:function(e){for(const i in e)if(o(e,i)){const n=e[i];if(t(n)||r(`Expected optionConfig.${i} to be an object with declarative option configuration, got ${typeof n} ${n}.`),o(n,"required")){const o=n.required,t=typeof o;"boolean"!==t&&"function"!==t&&r(`Expected optionConfig.${i}.required to be either boolean or function, got ${typeof o} ${o}.`)}else o(n,"default")||r(`Expected optionConfig.${i} to either have required or default value.`);if(o(n,"default")||o(n,"required")||r(`Expected optionConfig.${i} to either have required or default value.`),o(n,"description")){const o=n.description;"string"!=typeof n.description&&r(`Expected optionConfig.${i}.description to be a string, got ${typeof o} ${o}.`)}else r(`Missing description on optionConfig.${i} config.`);if(o(n,"validator")){const o=n.validator;"function"!=typeof n.validator&&r(`Expected optionConfig.${i}.validator to be a function, got ${typeof o} ${o}.`)}else r(`Missing validator on optionConfig.${i} config.`)}return t(e)},description:"an object with declarative option configuration"},userOptions:{required:!1,default:{},validator:t,description:"an object"},preffix:{required:!1,default:"",validator:o=>"string"==typeof o,description:"a string"},suffix:{required:!1,default:"",validator:o=>"string"==typeof o,description:"a string"},strict:{required:!1,default:!0,validator:o=>"boolean"==typeof o,description:"a boolean"}};export default function(o){const t=e({optionConfig:f,userOptions:o,preffix:i,suffix:n});return e(t)}
//# sourceMappingURL=merge-options.min.modern.js.map
