{"version":3,"file":"merge-options.min.modern.js","sources":["../src/utils/hasProperty.js","../src/utils/isObject.js","../src/merge-options.js","../src/index.js"],"sourcesContent":["function hasProperty(object, property) {\n  return Object.prototype.hasOwnProperty.call(object, property);\n}\n\nexport default hasProperty;\n","function isObject(value) {\n  return value !== null && typeof value === 'object' && Array.isArray(value) === false;\n}\n\nexport default isObject;\n","import hasProperty from '@/utils/hasProperty.js';\n\n/**\n * @typedef {Object} Option\n * @property {boolean|function} required - a flag or function accepts userOptions\n * @property {*} default - default value for fallback if user option fail validation\n * @property {function} validator - function for validating user option. Accepts userValue as first argument and userOptions as second. Should return boolean value\n * @property {string} description - human readable validator description. Uses to compose an error message and warning\n */\n\n/**\n * Uses option configuration to iterate over passed user options.\n * Returns an object with user options passed validation and/or default not required values.\n * Throws an error for every missing required option.\n * Fallback to default value to every not required option.\n * If user value fails validation throws an error in strict mode or otherwise shows a warning message and fallback to default value.\n * All errors and warnings are verbose and composed based on description of options.\n * @param {Object} config - required configuration\n * @param {Object.<string, Option>} config.optionConfig - declarative option configuration\n * @param {Object} [config.userOptions={}] - user options needs validation before merge\n * @param {string} [config.preffix=''] - string before an error or warning message\n * @param {string} [config.suffix=''] - string after an error or warning message\n * @param {boolean} [config.strict=true] - strict mode flag. Default = true.\n * In strict mode the function throws an error, when user option fails validaton.\n * Otherwise the function shows warning message and fallback to default value.\n * @return {Object} an object with all keys described in options with userOption values if they pass validation and/or default not required values.\n */\n\nfunction _mergeOptions({ optionConfig, userOptions = {}, preffix = '', suffix = '', strict = true }) {\n  const createMessage = (message) => [preffix, message, suffix].join(' ');\n\n  const mergedOptions = {};\n\n  // iterate over optionConfig to merge only options described in config\n  for (const optionKey in optionConfig) {\n    if (hasProperty(optionConfig, optionKey)) {\n      const optionPropertyConfig = optionConfig[optionKey];\n      const { required, default: _default, description, validator } = optionPropertyConfig;\n      const userValue = userOptions[optionKey];\n\n      // required can be function\n      const isRequired = hasProperty(optionPropertyConfig, 'required')\n        ? typeof required === 'function'\n          ? required(userOptions)\n          : required\n        : false;\n\n      const isUserOptionPassed = hasProperty(userOptions, optionKey);\n\n      const isValid = validator(userValue, userOptions);\n\n      if (isRequired) {\n        if (isUserOptionPassed) {\n          if (isValid) {\n            mergedOptions[optionKey] = userValue;\n          } else {\n            throw new TypeError(\n              createMessage(`Expected ${optionKey} to be ${description}, got ${typeof userValue} ${userValue}.`),\n            );\n          }\n        } else {\n          throw new TypeError(createMessage(`${optionKey} is required.`));\n        }\n      } else {\n        mergedOptions[optionKey] = _default;\n        if (isUserOptionPassed) {\n          if (isValid) {\n            mergedOptions[optionKey] = userValue;\n          } else {\n            if (strict) {\n              throw new TypeError(\n                createMessage(`Expected ${optionKey} to be ${description}, got ${typeof userValue} ${userValue}.`),\n              );\n            } else {\n              console.warn(\n                createMessage(\n                  `Expected ${optionKey} to be ${description}, got ${typeof userValue} ${userValue}. Fallback to default value ${_default}.`,\n                ),\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return mergedOptions;\n}\n\nexport default _mergeOptions;\n","import hasProperty from '@/utils/hasProperty.js';\nimport isObject from '@/utils/isObject.js';\nimport _mergeOptions from '@/merge-options.js';\n\nconst MESSAGE_PREFFIX = '[mergeOptions]:';\nconst MESSAGE_SUFFIX = '\\nCheck out documentation https://github.com/dubaua/merge-options#parameters-and-return';\n\nfunction throwTypeError(message) {\n  throw new TypeError([MESSAGE_PREFFIX, message, MESSAGE_SUFFIX].join(' '));\n}\n\nfunction optionConfigValidator(optionConfig) {\n  for (const key in optionConfig) {\n    if (hasProperty(optionConfig, key)) {\n      const optionPropertyConfig = optionConfig[key];\n\n      if (!isObject(optionPropertyConfig)) {\n        throwTypeError(\n          `Expected optionConfig.${key} to be an object with declarative option configuration, got ${typeof optionPropertyConfig} ${optionPropertyConfig}.`,\n        );\n      }\n\n      if (hasProperty(optionPropertyConfig, 'required')) {\n        const required = optionPropertyConfig.required;\n        const requiredType = typeof required;\n        if (!(requiredType === 'boolean' || requiredType === 'function')) {\n          throwTypeError(\n            `Expected optionConfig.${key}.required to be either boolean or function, got ${typeof required} ${required}.`,\n          );\n        }\n      } else {\n        if (!hasProperty(optionPropertyConfig, 'default')) {\n          throwTypeError(`Expected optionConfig.${key} to either have required or default value.`);\n        }\n      }\n\n      if (!hasProperty(optionPropertyConfig, 'default') && !hasProperty(optionPropertyConfig, 'required')) {\n        throwTypeError(`Expected optionConfig.${key} to either have required or default value.`);\n      }\n\n      if (hasProperty(optionPropertyConfig, 'description')) {\n        const description = optionPropertyConfig.description;\n        if (typeof optionPropertyConfig.description !== 'string') {\n          throwTypeError(\n            `Expected optionConfig.${key}.description to be a string, got ${typeof description} ${description}.`,\n          );\n        }\n      } else {\n        throwTypeError(`Missing description on optionConfig.${key} config.`);\n      }\n\n      if (hasProperty(optionPropertyConfig, 'validator')) {\n        const validator = optionPropertyConfig.validator;\n        if (typeof optionPropertyConfig.validator !== 'function') {\n          throwTypeError(\n            `Expected optionConfig.${key}.validator to be a function, got ${typeof validator} ${validator}.`,\n          );\n        }\n      } else {\n        throwTypeError(`Missing validator on optionConfig.${key} config.`);\n      }\n    }\n  }\n  return isObject(optionConfig);\n}\n\nconst OPTION_CONFIG = {\n  optionConfig: {\n    required: true,\n    validator: optionConfigValidator,\n    description: 'an object with declarative option configuration',\n  },\n  userOptions: {\n    required: false,\n    default: {},\n    validator: isObject,\n    description: 'an object',\n  },\n  preffix: {\n    required: false,\n    default: '',\n    validator: (x) => typeof x === 'string',\n    description: 'a string',\n  },\n  suffix: {\n    required: false,\n    default: '',\n    validator: (x) => typeof x === 'string',\n    description: 'a string',\n  },\n  strict: {\n    required: false,\n    default: true,\n    validator: (x) => typeof x === 'boolean',\n    description: 'a boolean',\n  },\n};\n\n/**\n * @typedef {Object} Option\n * @property {boolean|function} required - a flag or function accepts userOptions\n * @property {*} default - default value for fallback if user option fail validation\n * @property {function} validator - function for validating user option. Accepts userValue as first argument and userOptions as second. Should return boolean value\n * @property {string} description - human readable validator description. Uses to compose an error message and warning\n */\n\n/**\n * Uses option configuration to iterate over passed user options.\n * Returns an object with user options passed validation and/or default not required values.\n * Throws an error for every missing required option.\n * Fallback to default value to every not required option.\n * If user value fails validation throws an error in strict mode or otherwise shows a warning message and fallback to default value.\n * All errors and warnings are verbose and composed based on description of options.\n * @param {Object} config - required configuration\n * @param {Object.<string, Option>} config.optionConfig - declarative option configuration\n * @param {Object} [config.userOptions={}] - user options needs validation before merge\n * @param {string} [config.preffix=''] - string before an error or warning message\n * @param {string} [config.suffix=''] - string after an error or warning message\n * @param {boolean} [config.strict=true] - strict mode flag. Default = true\n * In strict mode the function throws an error, when user option fails validaton.\n * Otherwise the function shows warning message and fallback to default value.\n * @return {Object} an object with all keys described in options with userOption values if they pass validation and/or default not required values.\n */\n\nfunction mergeOptions(config) {\n  const validConfig = _mergeOptions({\n    optionConfig: OPTION_CONFIG,\n    userOptions: config,\n    preffix: MESSAGE_PREFFIX,\n    suffix: MESSAGE_SUFFIX,\n  });\n  return _mergeOptions(validConfig);\n}\n\nexport default mergeOptions;\n"],"names":["hasProperty","object","property","Object","prototype","hasOwnProperty","call","isObject","value","Array","isArray","_mergeOptions","optionConfig","userOptions","preffix","suffix","strict","createMessage","message","join","mergedOptions","optionKey","optionPropertyConfig","required","default","_default","description","validator","userValue","isRequired","isUserOptionPassed","isValid","TypeError","console","warn","MESSAGE_PREFFIX","MESSAGE_SUFFIX","throwTypeError","OPTION_CONFIG","key","requiredType","x","config","validConfig"],"mappings":"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"}